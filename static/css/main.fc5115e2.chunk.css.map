{"version":3,"sources":["webpack://src/styles/_reset.scss","webpack://src/styles/main.scss","webpack://src/styles/_include-media.scss","webpack://src/components/navigation/_navigation.scss","webpack://src/styles/_variables.scss","webpack://src/styles/index.scss","webpack://src/components/language-icon/_languageIcon.scss","webpack://src/components/maintenance/_maintenance.scss","webpack://src/pages/project/style.scss"],"names":[],"mappings":"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","file":"main.fc5115e2.chunk.css","sourcesContent":["/*\n\tStandard CSS Reset\n\tThis is used to account for differences in browsers.\n\tWithout a reset stylesheet there could be differences\n\tbetween browsers when loading your html website.\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","@import './reset';\n@import './variables';\n@import './include-media';\n\n// components\n@import '../components/navigation/navigation';\n\n// all pages styles will be placed here.\n// body-container\n.body-container {\n    display: flex;\n    flex-direction: column;\n    // background-image:  url(../assets/images/bg-bawah.png);\n    // background-position: bottom right;\n    // background-repeat:  no-repeat;\n    // background-size: auto;\n    min-height: 100vh;\n    min-width: 100%;\n    overflow: hidden;\n    padding: 0em;\n    \n    @include media('>#{$tablet}') {\n        padding: 1.5em 1em;\n    }\n\n    @include media('>#{$desktop}') {\n        padding: 1.5em 3em;\n    }\n}\n\n// nav\n@include navigationM;\n\n// main\nmain {\n    margin: .5em 0 6em;\n    padding: 0em;\n\n    \n    @include media('>#{$tablet}') {\n        margin: 2em 2em 5em;\n        padding: 0;\n    }\n    \n    @include media('>#{$desktop}') {\n        max-width: 1440px;\n        width: 100%;\n        margin: 2em auto;\n    }\n    \n    .heading {\n        text-align: center;\n        font-weight: bold;\n        margin-bottom: 2em;\n    }\n}","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","@import '../../styles/variables';\n@import '../../styles/include-media';\n\n@mixin navigationM {\n    header{\n        display: flex;\n        justify-content: flex-end;\n        position: relative;\n\n        button {\n            background-color: transparent;\n            outline: none;\n            border: none;\n        }\n\n        .drawer-open-button {\n            display: inline-block;\n            padding: .6em;\n            min-height: 44px;\n            // background-color: red;\n            margin: 2em 2em 0;\n\n            @include media('>#{$tablet}') {\n                display: none;\n            }\n        }\n\n        nav{\n            // background-color: #404040;\n\n            @include media('<#{$tablet}') {\n                position: absolute;\n                background-color: white;\n                height: 100vh;\n                text-align: center;\n                padding: 2em 0em;\n                width: 40%;\n                min-width: 300px;\n                transform: translateX(320px);\n                box-shadow: .2em .2em .8em rgba(0, 0, 0, 0.452);\n                transition: .3s transform;\n                z-index: 1000000;\n\n                &.active {\n                    transform: translateX(0);\n                }\n            }\n\n            ul{\n                display: flex;\n\n                @include media('<#{$tablet}') {\n                    flex-direction: column;\n                }\n\n                .drawer-close-button {\n                    // background-color: saddlebrown;\n                    display: none;\n                    width: 100%;\n                    text-align: center;\n                    \n                    @include media('<#{$tablet}') {\n                        display: inline-block;\n                    }\n                }\n                \n                a{\n                    color: $black;\n                    text-decoration: none;\n                    display: inline-block;\n                    min-height: 44px;\n                    padding: 1em;\n                    margin-right: 1em;\n                    transition: .5s color;\n                    \n                    &:hover{\n                        color: $dark-grey;\n                    }\n                    \n                    @include media('<#{$tablet}') {\n                        margin-right: 0;\n                        width: 100%;\n                    }\n                }\n            }\n        }\n        \n    }\n}","// colors\n// text\n$white: #FFFFFF;\n$black: #202020;\n$dark-grey: #AEAEAE;\n$light-blue: #2FA6F1;\n$lime-green: #1AFF12;\n\n\n// fontsize\n$nav-font-size: 1.5em;\n$title-font-size: 4em;\n\n// media query\n$tablet: 670px;\n$desktop: 940px;","@import './main.scss';\n\nbody {\n  margin: 0;\n  font-family: 'Comfortaa', cursive, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n// templating\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\n:root {\n  font-family: 'Comfortaa', cursive;\n}\n\n*{\n  box-sizing: border-box;\n}\n\n// heading\nh1 {\n  font-size: 2em;\n}\n\n// flexbox\n.row {\n  display: flex;\n  width: 100%;\n  flex-basis: 1;\n  \n  .col{\n    flex-grow: 1;\n  }\n}",".lang-icon-container {\n    display: inline-block;\n    height: 32px;\n    width: 32px;\n\n    .lang-icon {\n        height: 100%;\n        width: 100%;\n    }\n\n    .no-icon {\n        display: inline-block;\n        height: 2em;\n        vertical-align: middle;\n    }\n}","@import '../../styles/variables';\n@import '../../styles/include-media';\n\n.maintenance-container {\n    position: relative;\n    height: 50vh;\n    width: 80%;\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    background: violet;\n    text-align: center;\n    color: white;\n    box-shadow: .4em .4em rgba(0, 0, 0, 0.514);\n    \n    @include media('>#{tablet}') {\n        min-width: 100%;\n        padding: 0 10em;\n    }\n    \n    &::before {\n        position: absolute;\n        content: '';\n        background-image: url('../../assets/images/tool.png');\n        background-size: contain;\n        background-repeat: no-repeat;\n        height: 5em;\n        width: 5em;\n        top: 3em;\n        transform-origin: center;\n        // animation: rotate 5s linear forwards infinite;\n        \n        @include media('>#{tablet}') {\n            top: 1em;\n        }\n    }\n    \n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        to {\n            transform: rotate(360deg);\n        }\n    }\n    \n    h1 {\n        font-size: 1.5em;\n        line-height: 1.5;\n        font-weight: bold;\n        \n        @include media('>#{tablet}') {\n            font-size: 2em;\n        }\n    }\n    h2 {\n        font-size: 1em;\n        \n        @include media('>#{tablet}') {\n            font-size: 1.5em;\n        }\n    }\n}","@import '../../styles/variables';\n@import '../../styles/include-media';\n\n.project-container {\n    flex-direction: column-reverse;\n    \n    @include media('>#{$desktop}') {\n        flex-direction: row;\n    }\n}\n\n.mobile-text {\n    @include media('>#{$tablet}') {\n        display: none;\n    }\n}\n\n.card-container {\n    margin: 0 1em;\n    display: grid;\n    justify-content: unset;\n    overflow-x: scroll;\n    max-height: 160px;\n    grid-auto-flow: column;\n    grid-auto-columns: 8em;\n    // grid-template-columns:  repeat(10, 8em);\n    grid-template-rows: 10em;\n    column-gap: 10px;\n    scroll-snap-type: x proximity;\n    \n    @include media('>#{$tablet}') {\n        margin: 0;\n    }\n    \n    \n    @include media('>#{$desktop}') {\n        width: 50%;\n        margin: 0;\n        overflow: hidden;\n        max-height: unset;\n        grid-auto-flow: unset;\n        justify-content: center;\n        grid-template-columns:  repeat(auto-fill, 15em);\n        grid-template-rows: repeat(auto-fit, 15em);\n        gap: 1em;\n\n        @include media('<1260px') {\n            grid-template-columns:  repeat(auto-fill, 12em);\n            grid-template-rows: repeat(auto-fit, 12em);\n        }\n    }\n\n    .card {\n        margin: 0em .5em 1em;\n        min-width: 8em;\n        border-radius: .1em;\n        border: .1px solid rgba(0, 0, 0, 0.486);\n        transition: .3s box-shadow;\n        \n        @include media('>#{$desktop}') {\n            width: 15em;\n            height: 15em;\n            \n            &:hover {\n                box-shadow: .2em .2em rgba(0, 0, 0, 0.582);\n            }\n       \n            @include media('<1260px') {\n                width: 12em;\n                height: 12em;\n            }\n        }\n        \n\n        .card-img {\n            border-radius: .1em .1em 0 0;\n            border-bottom: .1px solid rgba(0, 0, 0, 0.486);\n            overflow: hidden;\n            height: 5em;\n            margin-bottom: .5em;\n\n            @include media('>#{$desktop}') {\n                // width: 15em;\n                height: 10em;\n\n                @include media('<1260px') {\n                    height: 8em;\n                }\n            }\n\n            img {\n                width: 100%;\n                height: 100%;\n                object-fit: cover;\n            }\n        }\n\n        .card-title {\n            font-size: 1em;\n            margin: 0 .2em;\n            margin-bottom: .1em;\n            display: inline-block;\n            text-decoration: none;\n            color: black;\n            transition: .2s color;\n\n            @include media('>#{$tablet}') {\n                overflow: hidden;\n                text-overflow: ellipsis;\n                display: -webkit-box;\n                -webkit-line-clamp: 2; /* number of lines to show */\n                -webkit-box-orient: vertical;\n            }\n            \n            @include media('>#{$desktop}') {\n                line-height: 1.2;\n                &:hover {\n                    color: $dark-grey;\n                }\n                \n                @include media('<1260px') {\n                    -webkit-line-clamp: 1; /* number of lines to show */\n                }\n            }    \n        }\n        \n        .card-description {\n            display: none;\n            font-size: .8em;    \n            font-family: 'Roboto', sans-serif;\n            margin: 0 .2em;\n            margin-bottom: .5em;\n            line-height: 1.2;\n\n            \n            a {\n                color: $black;\n            }\n            \n            @include media('>#{$desktop}') {\n                padding: 0 .2em;\n                overflow: hidden;\n                display: -webkit-box;\n                text-overflow: ellipsis;\n                -webkit-box-orient: vertical;\n                -webkit-line-clamp: 3; /* number of lines to show */\n                \n                @include media('<1260px') {\n                    padding: 0 .2em;\n                    -webkit-line-clamp: 2; /* number of lines to show */\n                }\n            }\n        }\n    }\n}\n\n\n.detail-container {\n\n    @include media('>#{$desktop}') {\n        max-width: 718px;\n        width: 50%;\n        border-radius: .1em;\n        border: .1px solid rgba(0, 0, 0, 0.486);\n        overflow: hidden;\n        height: fit-content;\n    }\n    .detail-image {\n        // margin-bottom: 1em;\n        border-radius: .1em .1em 0 0;\n        border-bottom: .1px solid rgba(0, 0, 0, 0.486);\n        overflow: hidden;\n        \n        @include media('>#{$desktop}') {\n            max-width: 718px;\n            width: 100%;\n        }\n\n        picture {\n            width: 100%;\n            height: 100%;\n        }\n        \n        img {\n            object-fit: cover;\n            width: 100%;\n            height: 100%;\n        }\n    }\n\n    .detail-title {\n        font-size: 1.7em;\n        font-weight: bold;\n        margin-bottom: .2em;\n    }\n    \n    .detail-subtitle {\n        font-size: 1.1em;\n        font-weight: bold;\n        margin-bottom: .2em;\n    }\n\n    .detail-description-container {\n        padding: 1em 1em;\n        \n        @include media('>#{$tablet}') {\n            padding: 1em 1.5em;\n        }\n\n        p {\n            font-family: 'Roboto', sans-serif;\n            font-size: .9em;\n            line-height: 1.2;\n            font-weight: normal;\n            margin-bottom: 1.5em;\n\n            a {\n                color: $black;\n            }\n        }\n    }\n\n    .detail-tech-container {\n        margin-bottom: 2em;\n    \n        @include media('>#{$desktop}') {\n            margin-bottom: 0;\n        }\n    }\n\n    .detail-action-container {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        display: flex;\n        justify-content: center;\n        padding: 1em 1em;\n        background-color: white;\n        \n        @include media('>#{$desktop}') {\n            box-shadow: none;\n            position: unset;\n            padding: 0 1em 1em;\n        }\n\n        a {\n            border-radius: .2em;\n            text-align: center;\n            margin: 0 .5em;\n            width: 100%;\n            display: inline-block;\n            padding: 1em 2em;\n            text-decoration: none;\n            font-family: 'Roboto', sans-serif;\n            min-height: 44px;\n            color: $black;\n            transition: .3s background-color;\n        }\n\n        .detail-action-button-visit {\n            background-color: $light-blue;\n\n            &.not-active {\n                pointer-events: none;\n                cursor: default;\n                text-decoration: none;\n                color: black;\n              }\n            \n            &:hover {\n                background-color: darken($light-blue, 10%);\n            }\n\n        }\n\n        .detail-action-button-source {\n            background-color: $lime-green;\n\n            &:hover {\n                background-color: darken($lime-green, 10%);\n            }\n        }\n    }\n\n}"]}